{
    "agent": null,
    "agentCluster": null,
    "agentClusterVar": null,
    "agentFieldsRestriction": "No Restriction",
    "agentType": "Any",
    "agentVar": null,
    "automaticOutputRetrievalFieldsRestriction": "No Restriction",
    "broadcastCluster": null,
    "broadcastClusterVar": null,
    "createConsole": false,
    "credentialFieldsRestriction": "No Restriction",
    "credentials": null,
    "credentialsVar": null,
    "description": "v0.24",
    "desktopInteract": false,
    "elevateUser": false,
    "environment": [],
    "environmentVariablesFieldsRestriction": "No Restriction",
    "exitCodeOutput": null,
    "exitCodeProcessing": "Success Exitcode Range",
    "exitCodeProcessingFieldsRestriction": "No Restriction",
    "exitCodeText": null,
    "exitCodes": "0",
    "fields": [
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "get_messages_from_queue",
                    "fieldValueLabel": "receive-message",
                    "sequence": 7,
                    "sysId": "134dfc587aea49408fbc32f877e199d9",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "send-message",
                    "sequence": 8,
                    "sysId": "c118482d76ac4315b6abffb4e4b8cd04",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "list-queues",
                    "sequence": 9,
                    "sysId": "1635b1b0b7794fba90be1ed658e01fd3",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 3",
            "fieldType": "Choice",
            "fieldValue": "send-message",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Action",
            "name": "action",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 0,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "963a6900cb70410bbd5eed01c2f58da8"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 6",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "list all queues starting with the prefix. If no prefix is given all queues are shown",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Queue Name Prefix",
            "name": "queue_name_prefix",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 17,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "list-queues",
            "sysId": "a587b811e0254049a97890bdae358540"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Credential Field 4",
            "fieldType": "Credential",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": "AWS_SECRET_ACCESS_KEY",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "AWS_SECRET_ACCESS_KEY",
            "name": "aws_secret_access_key",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": true,
            "sequence": 18,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "a6d5dc16beaf4ffb8684ba5a2b8f4fa0"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Credential Field 3",
            "fieldType": "Credential",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": "AWS_ACCESS_KEY_ID",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "AWS_ACCESS_KEY_ID",
            "name": "aws_access_key_id",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": true,
            "sequence": 20,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "8582986d0865429d928bf577471b3209"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 3",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": "e.g. eu-central-1",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "AWS_DEFAULT_REGION",
            "name": "aws_default_region",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": true,
            "sequence": 21,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "9991dcb4ec28430ea5f5084c335089e3"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "1",
                    "fieldValueLabel": "Yes",
                    "sequence": 0,
                    "sysId": "a1bff4be8c914ea19f2e555d5a418642",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "0",
                    "fieldValueLabel": "No",
                    "sequence": 1,
                    "sysId": "e5383598a57c46b5933960708e2ee036",
                    "useFieldValueForLabel": false
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 1",
            "fieldType": "Choice",
            "fieldValue": "0",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": "connect to s3 direct or via proxy server, if \"Yes\" is Proxy and Port field are mandatory",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Useproxy",
            "name": "useproxy",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 23,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "c2defe58233f461f9c55ec22b60d7da8"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "http",
                    "sequence": 0,
                    "sysId": "33c038c653bc4cdcb1ebfe1188d1d7ba",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "https",
                    "sequence": 1,
                    "sysId": "743c06b1331040e4b12cb3d11015beae",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "https_with_password",
                    "sequence": 2,
                    "sysId": "1a1613f1d51644819aa6a0e352c196a2",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 2",
            "fieldType": "Choice",
            "fieldValue": "http",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": "https or http proxy connection",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Proxy Type",
            "name": "proxy_type",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 24,
            "showIfField": "Choice Field 1",
            "showIfFieldValue": "1",
            "sysId": "9400b881dd83460ab60c7d8ad5bc3e03"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 1",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "proxy server ip or hostname",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Proxy",
            "name": "proxy",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 25,
            "showIfField": "Choice Field 1",
            "showIfFieldValue": "1",
            "sysId": "b0e195b99e76413ab478ea6171872ab0"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Credential Field 1",
            "fieldType": "Credential",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Proxycred",
            "name": "proxycred",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 30,
            "showIfField": "Choice Field 1",
            "showIfFieldValue": "1",
            "sysId": "dbe1c85d28f84ef684621729b6f5c828"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 2",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "proxy server port",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Port",
            "name": "port",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 31,
            "showIfField": "Choice Field 1",
            "showIfFieldValue": "1",
            "sysId": "7a0df105e799418c915c90eb3bc6a324"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 7",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": "resources are indentified in AWS by an Amazon Resource Name (ARN) - role arn is the ressource name for a role",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Role Arn",
            "name": "rolearn",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 32,
            "showIfField": "Choice Field 6",
            "showIfFieldValue": "yes",
            "sysId": "f6ffbe546f05474cb4eed68c9244272c"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "INFO",
                    "sequence": 0,
                    "sysId": "af7c4ec213fb4916adc62b1a4f96aeb3",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "DEBUG",
                    "sequence": 1,
                    "sysId": "544be4f92f3249bbb5c4d0a902c56152",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "WARNING",
                    "sequence": 2,
                    "sysId": "2439d1a53c784016b5d82f2b01a8dd5b",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "ERROR",
                    "sequence": 3,
                    "sysId": "cfaa215ff190492ab62436282dd2af03",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "CRITICAL",
                    "sequence": 4,
                    "sysId": "d461694dbfe84763a48aea737dd8ee98",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 7",
            "fieldType": "Choice",
            "fieldValue": "INFO",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Loglevel",
            "name": "loglevel",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 33,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "f8594b468f3841acbad7b4e7ca13718a"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 11",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "SQS Queue Name",
            "name": "queuename",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 35,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "get_messages_from_queue,send-message",
            "sysId": "293f6658004749d39e5513edfe613c92"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 12",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Message Body",
            "name": "messagebody",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 36,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "send-message",
            "sysId": "8ce0509034fb40ba9f7fd7258655d09c"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Script Field 1",
            "fieldType": "Script",
            "fieldValue": "orders.json",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Attribute Script",
            "name": "script",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 37,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "send-message",
            "sysId": "c163d50111084f229fd43adace7c9a59"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Integer Field 2",
            "fieldType": "Integer",
            "fieldValue": "10",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "The length of time, in seconds, for which to delay a specific message. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive DelaySeconds value become available for processing after th",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "DelaySeconds",
            "name": "delayseconds",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 39,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "send-message",
            "sysId": "ffe5ddd2f45e4e57a54490296b5907f0"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Integer Field 3",
            "fieldType": "Integer",
            "fieldValue": "0",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "The duration (in seconds) for which the call waits for a message to arrive in the queue before returning - default is  0 - short polling",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "WaitTimeSeconds",
            "name": "waittimeseconds",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 40,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "get_messages_from_queue",
            "sysId": "c32041e03b13440c8422b00934c91e4b"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Integer Field 4",
            "fieldType": "Integer",
            "fieldValue": "10",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "The maximum number of messages to return. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "MaxNumberOfMessages",
            "name": "maxnumberofmessages",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 41,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "get_messages_from_queue",
            "sysId": "a44adca13b474c74966cc26cfd19e3ca"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 5",
            "fieldType": "Text",
            "fieldValue": "['All']",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "The name of the message attribute, where N is the index. check documentation for available options",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "MessageAttributeNames",
            "name": "messageattributenames",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 42,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "get_messages_from_queue",
            "sysId": "398ddb94402448878183b9d4621dfecf"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "All",
                    "sequence": 0,
                    "sysId": "db97cdeb8bbf475db416b24fad478452",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "Policy",
                    "sequence": 1,
                    "sysId": "954ebfaffd4e4f1d923e14d2d2aed49a",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "VisibilityTimeout",
                    "sequence": 2,
                    "sysId": "a91a84c9c9bd492f9f3bc50cc11f9507",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "MaximumMessageSize",
                    "sequence": 3,
                    "sysId": "d38f26120ee944848dc3cb099080b083",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "MessageRetentionPeriod",
                    "sequence": 4,
                    "sysId": "6ef569ea4e6e48fa8b70dff2849bd178",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "ApproximateNumberOfMessages",
                    "sequence": 5,
                    "sysId": "5d62231843184727a3d77e1490b58e9f",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "ApproximateNumberOfMessagesNotVisible",
                    "sequence": 6,
                    "sysId": "d2d9af8918b54029a397d799e399c23d",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "CreatedTimestamp",
                    "sequence": 7,
                    "sysId": "bc70f277f3674d1b86a81e95fe4df726",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "LastModifiedTimestamp",
                    "sequence": 8,
                    "sysId": "c196093df78b4b1da5a7924ca9e6e38c",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "QueueArn",
                    "sequence": 9,
                    "sysId": "20adec26826241a4aaccbab9b975590d",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "ApproximateNumberOfMessagesDelayed",
                    "sequence": 10,
                    "sysId": "9df00c4c65c644a499a761a8373c2cf4",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "DelaySeconds",
                    "sequence": 11,
                    "sysId": "167f4f35303d4110b5bca1d6711721ab",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "ReceiveMessageWaitTimeSeconds",
                    "sequence": 12,
                    "sysId": "4285d7c29ca24bc2869e9374bcff5d77",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "RedrivePolicy",
                    "sequence": 13,
                    "sysId": "c68a08555eff40eca04364947bc5fee0",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "FifoQueue",
                    "sequence": 14,
                    "sysId": "51e8e8b151be4deea74edce33cc5c142",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "ContentBasedDeduplication",
                    "sequence": 15,
                    "sysId": "ee436360dabf46d88cef771e5cbafa91",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "KmsMasterKeyId",
                    "sequence": 16,
                    "sysId": "b4e8e9ec169a4016ba6076fa4076601d",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "KmsDataKeyReusePeriodSeconds",
                    "sequence": 17,
                    "sysId": "f298d6e427d0436c90290174481365b6",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 4",
            "fieldType": "Choice",
            "fieldValue": "All",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "A list of attributes that need to be returned along with each message. ",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "AttributeNames",
            "name": "attributenames",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 43,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "get_messages_from_queue",
            "sysId": "11826a7f3ea54be786e99c7c1329fe6b"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 4",
            "fieldType": "Text",
            "fieldValue": "0",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Interval in seconds",
            "name": "interval",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 44,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "get_messages_from_queue",
            "sysId": "8c068585e7e34ce289e7de6317402322"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "Yes",
                    "sequence": 0,
                    "sysId": "d90d1fb1bb5b4cac8991ef92c845c7e5",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "No",
                    "sequence": 1,
                    "sysId": "9324b76cd6ad4931b408676bed9735e1",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 5",
            "fieldType": "Choice",
            "fieldValue": "Yes",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Delete Messages from Queue after reading",
            "name": "delete_messages",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 45,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "get_messages_from_queue",
            "sysId": "6ed5ed57d894429d83871b2f1b389c1f"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "no",
                    "fieldValueLabel": "No",
                    "sequence": 0,
                    "sysId": "e138fe66eb5745db9737eddebb9fa399",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "yes",
                    "fieldValueLabel": "Yes",
                    "sequence": 1,
                    "sysId": "0f165601b1c54b0e949d84584cbad29b",
                    "useFieldValueForLabel": false
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 6",
            "fieldType": "Choice",
            "fieldValue": "no",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Role Based Access (STS)",
            "name": "rbca",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 46,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "270bd3fafd374c6d836443a2e0da8640"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 13",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "e.g. http://192.168.88.40:8080/uc ( Note: url without \"/\" at the end )",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Universal Controller URL",
            "name": "base_url_uac",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 47,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "get_messages_from_queue",
            "sysId": "9d5bad52c3e64261bc077536314314b3"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "run_once",
                    "fieldValueLabel": "Run Once",
                    "sequence": 0,
                    "sysId": "671e910bd65c421a8f9909679a82621a",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "run_forever",
                    "fieldValueLabel": "Run Forever",
                    "sequence": 1,
                    "sysId": "b0225f0cc558468fb6a691b8b14e12dc",
                    "useFieldValueForLabel": false
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 8",
            "fieldType": "Choice",
            "fieldValue": "run_once",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "once : if a message is found the task goes to success; forever : each time a new message is found the configured task is launched",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Run Mode",
            "name": "run_mode",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 48,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "get_messages_from_queue",
            "sysId": "5065398075bf475bac6f76f888e03adc"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Credential Field 2",
            "fieldType": "Credential",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Universal Controller Credentials with REST API Access",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Universal Controller Credentials",
            "name": "rest_credentials_uac",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 49,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "get_messages_from_queue",
            "sysId": "5914de3ee52f42fd83d28a06de6f8862"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 8",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Task to launch, if a message was found",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Launch Task",
            "name": "launch_task",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 50,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "get_messages_from_queue",
            "sysId": "aa62f1174d06437dbf75729b57376bee"
        }
    ],
    "name": "AWS-SQS",
    "outputFailureOnly": false,
    "outputReturnFile": null,
    "outputReturnNline": "100",
    "outputReturnSline": "1",
    "outputReturnText": null,
    "outputReturnType": "OUTERR",
    "outputType": "STDOUT",
    "runtimeDir": null,
    "script": null,
    "scriptTypeWindows": ".uapy",
    "scriptUnix": "#!/opt/universal/python3.6/bin/python3\n###############################################################################\n#\n#    Name: aws_sqs.py\n#\n#         Origins: Stonebranch\n#          Author: Abdullah Saglam, Nils Buer\n#            Date: 12-11-2020\n#\n#    Requires Universal Agent for Linux/Windows/...\n#\n#    Copyright (c) Stonebranch, 2020.  All rights reserved.\n#\n#    Purpose: Poll Message from SQS queue in Json format\n#    Version History:\n#\n#     0.1  Nils     2020-11-09    Initial Version\n#     0.2  Nils     2020-11-09    Initial Version\n#     0.3  Nils     2020-11-09    Initial Version\n#     0.4  Nils     2020-11-09    Initial Version\n#     0.5  Nils     2020-11-09    Initial Version\n#     0.6  Nils     2020-11-09    Initial Version\n#     0.7  Nils     2020-11-09    Initial Version\n#     0.8  Nils     2020-11-09    Parameter VisibilityTimeout removed\n#     0.9  Nils     2020-11-19    Task fails is no event was found\n#     0.10 Abdullah 2020-11-19    Loop with sleep every x seconds\n#     0.11 Nils     2020-11-19    delete option added\n#     0.12 Nils     2020-11-19    delete option added\n#     0.13 Abdullah 2020-11-24    changes\n#     0.14 Nils     2020-11-25    queue_name_prefix added\n#     0.15 Abdullah 2020-11-25    rbac added missing update\n#     0.16 Abdullah 2020-11-25    rbac added missing update\n#     0.17 Abdullah 2020-11-25    launch task feature\n#     0.18 Abdullah 2020-11-25    launch task feature\n#     0.19 Nils     2020-11-25    status check incld in get_messages_from_queue\n#     0.20 Nils     2020-11-25    changes, update status check\n#     0.21 Nils     2020-11-25    changes, update status check\n#     0.22 Nils     2020-11-25    changes, update status check\n#     0.23 Nils     2020-11-25    changes, update status check\n#     0.24 Nils     2020-12-10    disable uac check if time_difference set to 0\n###############################################################################\n\nimport json\nimport logging\nimport boto3\nimport sys\nimport time\nimport os\nimport site\nimport requests\n\n\ngl_version = \"0.24\"\ngl_variable_prefix = \"var\"\ngl_action = \"${ops_var_action}\"\n\nlogging.basicConfig(level=\"${ops_var_loglevel}\",\n                    format=' %(asctime)s - %(levelname)s - %(message)s')\ngl_interval = int(\"${ops_var_interval}\" if \"${ops_var_interval}\" else \"0\")\ngl_base_url_uac = \"${ops_var_base_url_uac}\".rstrip(\" /\")\ngl_auth_uac = (\"${_credentialUser('${ops_var_rest_credentials_uac}')}\",\n               \"${_credentialPwd('${ops_var_rest_credentials_uac}')}\")\ngl_launch_task = \"${ops_var_launch_task}\"\ngl_run_mode = \"${ops_var_run_mode}\"\ngl_last_time = time.time()\ngl_time_difference = 60\n\n\ndef main():\n    print_variables()\n    endpoint_url = None\n    role_arn = None if not \"${ops_var_rolearn}\".strip() else \"${ops_var_rolearn}\".strip()\n    service_name = \"sqs\"\n    sb_con = SbAws(endpoint_url,\n                   \"${_credentialPwd('${ops_var_aws_access_key_id}')}\",\n                   \"${_credentialPwd('${ops_var_aws_secret_access_key}')}\",\n                   role_arn,\n                   \"${ops_var_aws_default_region}\",\n                   service_name,\n                   \"${ops_var_useproxy}\",\n                   \"${ops_var_proxy_type}\",\n                   \"${_credentialUser('${ops_var_proxycred}')}\",\n                   \"${_credentialPwd('${ops_var_proxycred}')}\",\n                   \"${ops_var_proxy}\",\n                   \"${ops_var_port}\")\n    sb_rest = SbRestApi(gl_base_url_uac, gl_auth_uac)\n\n    if gl_action == \"send-message\":\n        sb_con.send_message()\n        pass\n    elif gl_action == \"get_messages_from_queue\":\n        sb_con.get_messages_from_queue(\"${ops_var_queuename}\",\n                                       gl_launch_task,\n                                       gl_run_mode,\n                                       sb_rest)\n        pass\n    elif gl_action == \"list-queues\":\n        sb_con.list_queues(\"${ops_var_queue_name_prefix}\")\n        pass\n\n\ndef print_variables():\n    logging.info(\"Python version <<< \" + sys.version + \" >>>\")\n    logging.info(\"Python sites <<< \" + str(site.getsitepackages()) + \" >>>\")\n    logging.info(\n        \"Executing task version \" + gl_version + \" with the following parameters\")\n    print_defined_variables(gl_variable_prefix)\n\n\ndef print_defined_variables(variable_prefix):\n    all_variables = r\"\"\"${_scope}\"\"\"\n    separate_variables = [variable for variable in all_variables.split(', ') if\n                          \"ops_\" + variable_prefix in variable]\n    logging.info(str(separate_variables).replace(\", \", \",\\n\"))\n\n\nclass SbAws:\n    \"\"\"Stonebranch Amazon Web Services Class for python\n\n    This class is written for file operations\n    to and from AWS\n\n    Attributes:\n        _storage_client: keeps the resource identifier\n        _library_version: keeps the class library version\n        _region_name: region name\n    \"\"\"\n\n    def __init__(self,\n                 endpoint_url,\n                 aws_access_key_id,\n                 aws_secret_access_key,\n                 role_arn,\n                 region_name,\n                 service_name=\"s3\",\n                 use_proxy=\"0\",\n                 proxy_type=\"http\",\n                 proxy_user=None,\n                 proxy_passwd=None,\n                 proxy_host=None,\n                 proxy_port=None):\n        \"\"\"Initiates the class instance\n\n        Initiates the class instance with with the given parameters\n\n        Args:\n            endpoint_url : MINIO endpoint\n            aws_access_key_id: Aws access key id\n            aws_secret_access_key: Aws access key\n            role_arn: role arn for rbac\n            region_name: Region name\n            service_name: Service name\n            use_proxy: proxy use flag, 0 or 1\n            proxy_type: proxy type, http or https\n            proxy_user: proxy user information\n            proxy_passwd: proxy password information\n            proxy_host: proxy host information\n            proxy_port: proxy port information\n        Returns:\n            -\n\n        Raises:\n            -\n        \"\"\"\n        self._storage_client = None\n        self._storage_resource = None\n        self._library_version = \"1.1\"\n        logging.info(\n            \"AWS SB library version \" + self._library_version)\n        self._region_name = region_name\n        self.connect_aws(endpoint_url,\n                         aws_access_key_id,\n                         aws_secret_access_key,\n                         role_arn,\n                         region_name,\n                         service_name,\n                         use_proxy,\n                         proxy_type,\n                         proxy_user,\n                         proxy_passwd,\n                         proxy_host,\n                         proxy_port)\n\n    def __del__(self):\n        \"\"\"Destructor of the class instance\"\"\"\n        self._storage_client = None\n        self._storage_resource = None\n\n    def connect_aws(self,\n                    endpoint_url,\n                    aws_access_key_id,\n                    aws_secret_access_key,\n                    role_arn,\n                    region_name,\n                    service_name,\n                    use_proxy=\"0\",\n                    proxy_type=\"http\",\n                    proxy_user=None,\n                    proxy_passwd=None,\n                    proxy_host=None,\n                    proxy_port=None):\n        \"\"\"Connects to cloud.\n\n        Connects to the cloud with or without proxy\n        Assigns the resource id to _storage_client\n\n        Args:\n            endpoint_url: end point to MINIO\n            aws_access_key_id: Aws access key id\n            aws_secret_access_key: Aws access key\n            role_arn: role arn for rbac\n            region_name: Region name\n            service_name: Service name\n            use_proxy: proxy use flag, 0 or 1\n            proxy_type: proxy type, http or https\n            proxy_user: proxy user information\n            proxy_passwd: proxy password information\n            proxy_host: proxy host information\n            proxy_port: proxy port information\n\n        Returns:\n            -\n\n        Raises:\n            -\n        \"\"\"\n        logging.debug('Establishing connection')\n        if use_proxy in \"Yes,true,True,1\":\n            # connection via Proxy\n            logging.info('S3 Connection via Proxy: %s:%s' % (\n                proxy_host, proxy_port))\n            if proxy_type == \"https_with_password\":\n                os.environ['https_proxy'] = \"https://%s:%s@%s:%s\" % (\n                    proxy_user, proxy_passwd, proxy_host, proxy_port)\n            elif proxy_type == \"https\":\n                os.environ['https_proxy'] = \"https://%s:%s\" % (\n                    proxy_host, proxy_port)\n            else:\n                os.environ['http_proxy'] = \"http://%s:%s\" % (\n                    proxy_host, proxy_port)\n        else:\n            # connection without Proxy\n            # Create a S3 client, provide the AWS credentials, provide proxy\n            logging.info('Direct S3 Connection without Proxy')\n        if role_arn:\n            logging.info('Authentication RBAC')\n            sts_client = boto3.client('sts',\n                                      aws_access_key_id=aws_access_key_id,\n                                      aws_secret_access_key=aws_secret_access_key)\n            assumed_role_object = sts_client.assume_role(\n                RoleArn=role_arn,\n                RoleSessionName=\"AssumeRoleSession1\"\n            )\n            credentials = assumed_role_object['Credentials']\n            s3client = boto3.client(\n                service_name,\n                endpoint_url=endpoint_url,\n                aws_access_key_id=credentials['AccessKeyId'],\n                aws_secret_access_key=credentials['SecretAccessKey'],\n                aws_session_token=credentials['SessionToken'],\n                region_name=region_name)\n            self._storage_client = s3client\n            s3resource = boto3.resource(\n                service_name,\n                endpoint_url=endpoint_url,\n                aws_access_key_id=credentials['AccessKeyId'],\n                aws_secret_access_key=credentials['SecretAccessKey'],\n                aws_session_token=credentials['SessionToken'],\n                region_name=region_name)\n            self._storage_resource = s3resource\n        else:\n            logging.info('Authentication Access Key')\n            s3client = boto3.client(\n                service_name,\n                endpoint_url=endpoint_url,\n                aws_access_key_id=aws_access_key_id,\n                aws_secret_access_key=aws_secret_access_key,\n                region_name=region_name)\n            self._storage_client = s3client\n            s3resource = boto3.resource(\n                service_name,\n                endpoint_url=endpoint_url,\n                aws_access_key_id=aws_access_key_id,\n                aws_secret_access_key=aws_secret_access_key,\n                region_name=region_name)\n            self._storage_resource = s3resource\n\n    def list_queues(self,\n                    queue_name_prefix=None):\n        \"\"\"List SQS queues.\n        :queue_name_prefix: list all queues starting with the prefix\n        \"\"\"\n        # Get client connection\n        try:\n            sqs_client = self._storage_client\n            response = sqs_client.list_queues(\n                QueueNamePrefix=queue_name_prefix)\n            print (response['QueueUrls'])\n        except:\n            logging.error(f\"No Queue with Prefix: {queue_name_prefix} could be found\")\n            exit(1)\n\n    def get_messages_from_queue(self, queue_name, launch_task, run_mode, rest):\n        \"\"\"Generates messages from an SQS queue.\n\n        Note: this continues to generate messages until the queue is empty.\n        Every message on the queue will be deleted.\n\n        Args:\n            queue_name: queue name to be checked\n            launch_task: task to be launched\n            run_mode: run once or in a loop\n            rest: rest object for oms communication\n        Returns:\n            -\n        Raises:\n            -\n        \"\"\"\n        # Get client connection\n        sqs_client = self._storage_client\n        # Get the queue_url from queue name\n        response = sqs_client.get_queue_url(QueueName=queue_name)\n        queue_url = response['QueueUrl']\n        logging.info(f\"queue_url: {queue_url}\")\n        global gl_last_time\n\n        attribute_names = ['${ops_var_attributenames}']\n        message_attribute_names = ['%s' % attr for attr in\n                                   \"${ops_var_messageattributenames}\".split(\",\")]\n        max_number_of_messages = int(\n            \"${ops_var_maxnumberofmessages}\" if \"${ops_var_maxnumberofmessages}\" else \"0\")\n        # visibility_timeout = 30\n        wait_time_seconds = int(\n            \"${ops_var_waittimeseconds}\" if \"${ops_var_waittimeseconds}\" else \"0\")\n        delete_messages = str(\n            \"${ops_var_delete_messages}\" if \"${ops_var_delete_messages}\" else \"Yes\")\n        logging.info(f\"Scanning for new messaged in queue: {queue_name}\")\n        while True:\n            if gl_time_difference:\n                time_now = time.time()\n                if time_now - gl_last_time > gl_time_difference:\n                    gl_last_time = time_now\n                    if not rest.check_task_status():\n                        logging.info(f\"Exiting\")\n                        exit(1)\n            resp = sqs_client.receive_message(\n                QueueUrl=queue_url,\n                AttributeNames=attribute_names,\n                MessageAttributeNames=message_attribute_names,\n                MaxNumberOfMessages=max_number_of_messages,\n                # VisibilityTimeout=visibility_timeout,\n                WaitTimeSeconds=wait_time_seconds\n            )\n            msg_count = 0\n            if \"Messages\" in resp:\n                for message in resp['Messages']:\n                    print(json.dumps(message))\n                    msg_count += 1\n                    message_body = message[\"Body\"]\n                    message_attributes = message[\"MessageAttributes\"]\n                    message_body_json_pack = str(\n                        message_body).replace('\"', '\\\\\"').replace(\"\\'\", '\\\\\"').replace(\n                        '\\n', '\\\\n')\n                    message_attributes_json_pack = str(\n                        message_attributes).replace('\"', '\\\\\"').replace(\"\\'\", '\\\\\"').replace(\n                        '\\n', '\\\\n')\n                    data_str = '{\"variables\": [{\"name\": \"body\", \"value\": \"%s\"}, ' \\\n                               '{\"name\": \"attributes\", \"value\": \"%s\"}], \"name\": \"%s\"}' \\\n                               % (message_body_json_pack,\n                                  message_attributes_json_pack,\n                                  gl_launch_task)\n                    logging.debug(data_str)\n                    rest.launch_task(data_str)\n                logging.info(\"Found %d Message%s\" % (msg_count, \"s\" if msg_count>1 else \"\"))\n\n            if not msg_count:\n                logging.debug(\"No Message was found\")\n                if gl_interval:\n                    logging.debug(f\"Sleeping {gl_interval} seconds\")\n                    time.sleep(float(gl_interval))\n                    continue\n                else:\n                    logging.info(f\"Exiting Not Found\")\n                    exit(10)\n\n            entries = [{'Id': str(index), 'ReceiptHandle': msg['ReceiptHandle']}\n                for index, msg in enumerate(resp['Messages'])]\n\n            if delete_messages == 'Yes':\n                logging.info(\"Deleting entries\")\n                resp = sqs_client.delete_message_batch(\n                    QueueUrl=queue_url, Entries=entries\n                )\n                # logging.info(\"delete response: \" + str(resp))\n                if len(resp['Successful']) != len(entries):\n                    raise RuntimeError(\n                        f\"Failed to delete messages: entries={entries!r} resp={resp!r}\"\n                    )\n                else:\n                    logging.info(\"Deleted %d entr%s\" % (len(entries), \"ies\" if msg_count>1 else \"y\"))\n                # logging.info(f\"Exiting Successful\")\n            else:\n                logging.info(f\"Message will remain in QUEUE, because Delete_Message option was not selected\")\n            if run_mode == \"run_once\":\n                logging.info(f\"Exiting Successful\")\n                exit(0)\n\n    def send_message(self):\n        script_data_dict = None\n        script_data = \"\"\n\n        # Get sqs connection\n        sqs_resource = self._storage_resource\n\n        # Get the queue\n        queue = sqs_resource.get_queue_by_name(QueueName='${ops_var_queuename}')\n\n        try:\n            script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n            script_data = script.read()\n            script_data_dict = json.loads(script_data)\n            logging.info(f\"attributes: {script_data}\")\n        except IOError:\n            logging.info(f\"No Message Attribute script provided\")\n\n        # Send message to SQS queue\n        response = queue.send_message(\n            DelaySeconds=int(\"${ops_var_delayseconds}\"),\n            MessageAttributes=script_data_dict,\n            MessageBody=('${ops_var_messagebody}')\n        )\n        logging.info(f\"Message Send with ID:{response['MessageId']}\")\n\n\nclass SbRestApi:\n    \"\"\"Stonebranch REST API Class for python\n\n    This class is written for web service operations to UAC\n\n    Attributes:\n        _base_url: base uac url\n        _auth_uac: authentication for uac\n        _library_version: keeps the class library version\n    \"\"\"\n    def __init__(self, base_url, authentication):\n        self._base_url = base_url\n        self._auth_uac = authentication\n        self._library_version = \"1.0\"\n        logging.info(\n            \"REST SB library version \" + self._library_version)\n\n    def launch_task(self, data_str):\n        url = '%s/resources/task/ops-task-launch' % self._base_url\n        logging.debug('URL: %s' % url)\n        local_headers = {'content-type': 'application/json'}\n\n        response = requests.post(url, headers=local_headers, data=data_str,\n                                 auth=self._auth_uac, stream=True)\n\n        if 200 != response.status_code:\n            logging.error('Response: %s' % response)\n            logging.error('Response: %s' % response.text)\n            exit(1)\n        else:\n            logging.debug('Response 200 received')\n\n    def check_task_status(self):\n        logging.info('Checking task status %s' % \"${ops_task_id}\")\n        task_states = \"queued,defined,time_wait,started,running,resource_wait,resource_requested,started\"\n        url = '%s/resources/taskinstance/list' % self._base_url\n        logging.debug('URL: %s' % url)\n        local_headers = {'Content-Type': 'application/json',\n                         'Accept': 'application/json'}\n        data_str = \"\"\"{\"sysId\": \"${ops_task_id}\"}\"\"\"\n        logging.debug(data_str)\n        response = requests.post(url, headers=local_headers, data=data_str,\n                                 auth=self._auth_uac, stream=True, verify=False)\n\n        if 200 != response.status_code:\n            logging.error('Response: %s' % response.text)\n            exit(1)\n        else:\n            logging.debug('Response 200 received %s' % response.text)\n\n        resp_data = None\n        try:\n            resp_data = response.json()\n            # ...\n        except ValueError:\n            # no JSON returned\n            pass\n        logging.debug(f\"received data: {resp_data}\")\n\n        if \"status\" in response.text:\n            task_status = resp_data[0][\"status\"]\n            logging.debug('STATUS: %s' % task_status)\n            if task_status.lower() in task_states:\n                return True\n            else:\n                return False\n        else:\n            logging.debug(\"Task is not existing\")\n            return False\n\n\n# -- Execute\nif __name__ == '__main__':\n    main()\n",
    "scriptWindows": "#!/opt/universal/python3.6/bin/python3\n###############################################################################\n#\n#    Name: aws_sqs.py\n#\n#         Origins: Stonebranch\n#          Author: Abdullah Saglam, Nils Buer\n#            Date: 12-11-2020\n#\n#    Requires Universal Agent for Linux/Windows/...\n#\n#    Copyright (c) Stonebranch, 2020.  All rights reserved.\n#\n#    Purpose: Poll Message from SQS queue in Json format\n#    Version History:\n#\n#     0.1  Nils     2020-11-09    Initial Version\n#     0.2  Nils     2020-11-09    Initial Version\n#     0.3  Nils     2020-11-09    Initial Version\n#     0.4  Nils     2020-11-09    Initial Version\n#     0.5  Nils     2020-11-09    Initial Version\n#     0.6  Nils     2020-11-09    Initial Version\n#     0.7  Nils     2020-11-09    Initial Version\n#     0.8  Nils     2020-11-09    Parameter VisibilityTimeout removed\n#     0.9  Nils     2020-11-19    Task fails is no event was found\n#     0.10 Abdullah 2020-11-19    Loop with sleep every x seconds\n#     0.11 Nils     2020-11-19    delete option added\n#     0.12 Nils     2020-11-19    delete option added\n#     0.13 Abdullah 2020-11-24    changes\n#     0.14 Nils     2020-11-25    queue_name_prefix added\n#     0.15 Abdullah 2020-11-25    rbac added missing update\n#     0.16 Abdullah 2020-11-25    rbac added missing update\n#     0.17 Abdullah 2020-11-25    launch task feature\n#     0.18 Abdullah 2020-11-25    launch task feature\n#     0.19 Nils     2020-11-25    status check incld in get_messages_from_queue\n#     0.20 Nils     2020-11-25    changes, update status check\n#     0.21 Nils     2020-11-25    changes, update status check\n#     0.22 Nils     2020-11-25    changes, update status check\n#     0.23 Nils     2020-11-25    changes, update status check\n#     0.24 Nils     2020-12-10    disable uac check if time_difference set to 0\n###############################################################################\n\nimport json\nimport logging\nimport boto3\nimport sys\nimport time\nimport os\nimport site\nimport requests\n\n\ngl_version = \"0.24\"\ngl_variable_prefix = \"var\"\ngl_action = \"${ops_var_action}\"\n\nlogging.basicConfig(level=\"${ops_var_loglevel}\",\n                    format=' %(asctime)s - %(levelname)s - %(message)s')\ngl_interval = int(\"${ops_var_interval}\" if \"${ops_var_interval}\" else \"0\")\ngl_base_url_uac = \"${ops_var_base_url_uac}\".rstrip(\" /\")\ngl_auth_uac = (\"${_credentialUser('${ops_var_rest_credentials_uac}')}\",\n               \"${_credentialPwd('${ops_var_rest_credentials_uac}')}\")\ngl_launch_task = \"${ops_var_launch_task}\"\ngl_run_mode = \"${ops_var_run_mode}\"\ngl_last_time = time.time()\ngl_time_difference = 60\n\n\ndef main():\n    print_variables()\n    endpoint_url = None\n    role_arn = None if not \"${ops_var_rolearn}\".strip() else \"${ops_var_rolearn}\".strip()\n    service_name = \"sqs\"\n    sb_con = SbAws(endpoint_url,\n                   \"${_credentialPwd('${ops_var_aws_access_key_id}')}\",\n                   \"${_credentialPwd('${ops_var_aws_secret_access_key}')}\",\n                   role_arn,\n                   \"${ops_var_aws_default_region}\",\n                   service_name,\n                   \"${ops_var_useproxy}\",\n                   \"${ops_var_proxy_type}\",\n                   \"${_credentialUser('${ops_var_proxycred}')}\",\n                   \"${_credentialPwd('${ops_var_proxycred}')}\",\n                   \"${ops_var_proxy}\",\n                   \"${ops_var_port}\")\n    sb_rest = SbRestApi(gl_base_url_uac, gl_auth_uac)\n\n    if gl_action == \"send-message\":\n        sb_con.send_message()\n        pass\n    elif gl_action == \"get_messages_from_queue\":\n        sb_con.get_messages_from_queue(\"${ops_var_queuename}\",\n                                       gl_launch_task,\n                                       gl_run_mode,\n                                       sb_rest)\n        pass\n    elif gl_action == \"list-queues\":\n        sb_con.list_queues(\"${ops_var_queue_name_prefix}\")\n        pass\n\n\ndef print_variables():\n    logging.info(\"Python version <<< \" + sys.version + \" >>>\")\n    logging.info(\"Python sites <<< \" + str(site.getsitepackages()) + \" >>>\")\n    logging.info(\n        \"Executing task version \" + gl_version + \" with the following parameters\")\n    print_defined_variables(gl_variable_prefix)\n\n\ndef print_defined_variables(variable_prefix):\n    all_variables = r\"\"\"${_scope}\"\"\"\n    separate_variables = [variable for variable in all_variables.split(', ') if\n                          \"ops_\" + variable_prefix in variable]\n    logging.info(str(separate_variables).replace(\", \", \",\\n\"))\n\n\nclass SbAws:\n    \"\"\"Stonebranch Amazon Web Services Class for python\n\n    This class is written for file operations\n    to and from AWS\n\n    Attributes:\n        _storage_client: keeps the resource identifier\n        _library_version: keeps the class library version\n        _region_name: region name\n    \"\"\"\n\n    def __init__(self,\n                 endpoint_url,\n                 aws_access_key_id,\n                 aws_secret_access_key,\n                 role_arn,\n                 region_name,\n                 service_name=\"s3\",\n                 use_proxy=\"0\",\n                 proxy_type=\"http\",\n                 proxy_user=None,\n                 proxy_passwd=None,\n                 proxy_host=None,\n                 proxy_port=None):\n        \"\"\"Initiates the class instance\n\n        Initiates the class instance with with the given parameters\n\n        Args:\n            endpoint_url : MINIO endpoint\n            aws_access_key_id: Aws access key id\n            aws_secret_access_key: Aws access key\n            role_arn: role arn for rbac\n            region_name: Region name\n            service_name: Service name\n            use_proxy: proxy use flag, 0 or 1\n            proxy_type: proxy type, http or https\n            proxy_user: proxy user information\n            proxy_passwd: proxy password information\n            proxy_host: proxy host information\n            proxy_port: proxy port information\n        Returns:\n            -\n\n        Raises:\n            -\n        \"\"\"\n        self._storage_client = None\n        self._storage_resource = None\n        self._library_version = \"1.1\"\n        logging.info(\n            \"AWS SB library version \" + self._library_version)\n        self._region_name = region_name\n        self.connect_aws(endpoint_url,\n                         aws_access_key_id,\n                         aws_secret_access_key,\n                         role_arn,\n                         region_name,\n                         service_name,\n                         use_proxy,\n                         proxy_type,\n                         proxy_user,\n                         proxy_passwd,\n                         proxy_host,\n                         proxy_port)\n\n    def __del__(self):\n        \"\"\"Destructor of the class instance\"\"\"\n        self._storage_client = None\n        self._storage_resource = None\n\n    def connect_aws(self,\n                    endpoint_url,\n                    aws_access_key_id,\n                    aws_secret_access_key,\n                    role_arn,\n                    region_name,\n                    service_name,\n                    use_proxy=\"0\",\n                    proxy_type=\"http\",\n                    proxy_user=None,\n                    proxy_passwd=None,\n                    proxy_host=None,\n                    proxy_port=None):\n        \"\"\"Connects to cloud.\n\n        Connects to the cloud with or without proxy\n        Assigns the resource id to _storage_client\n\n        Args:\n            endpoint_url: end point to MINIO\n            aws_access_key_id: Aws access key id\n            aws_secret_access_key: Aws access key\n            role_arn: role arn for rbac\n            region_name: Region name\n            service_name: Service name\n            use_proxy: proxy use flag, 0 or 1\n            proxy_type: proxy type, http or https\n            proxy_user: proxy user information\n            proxy_passwd: proxy password information\n            proxy_host: proxy host information\n            proxy_port: proxy port information\n\n        Returns:\n            -\n\n        Raises:\n            -\n        \"\"\"\n        logging.debug('Establishing connection')\n        if use_proxy in \"Yes,true,True,1\":\n            # connection via Proxy\n            logging.info('S3 Connection via Proxy: %s:%s' % (\n                proxy_host, proxy_port))\n            if proxy_type == \"https_with_password\":\n                os.environ['https_proxy'] = \"https://%s:%s@%s:%s\" % (\n                    proxy_user, proxy_passwd, proxy_host, proxy_port)\n            elif proxy_type == \"https\":\n                os.environ['https_proxy'] = \"https://%s:%s\" % (\n                    proxy_host, proxy_port)\n            else:\n                os.environ['http_proxy'] = \"http://%s:%s\" % (\n                    proxy_host, proxy_port)\n        else:\n            # connection without Proxy\n            # Create a S3 client, provide the AWS credentials, provide proxy\n            logging.info('Direct S3 Connection without Proxy')\n        if role_arn:\n            logging.info('Authentication RBAC')\n            sts_client = boto3.client('sts',\n                                      aws_access_key_id=aws_access_key_id,\n                                      aws_secret_access_key=aws_secret_access_key)\n            assumed_role_object = sts_client.assume_role(\n                RoleArn=role_arn,\n                RoleSessionName=\"AssumeRoleSession1\"\n            )\n            credentials = assumed_role_object['Credentials']\n            s3client = boto3.client(\n                service_name,\n                endpoint_url=endpoint_url,\n                aws_access_key_id=credentials['AccessKeyId'],\n                aws_secret_access_key=credentials['SecretAccessKey'],\n                aws_session_token=credentials['SessionToken'],\n                region_name=region_name)\n            self._storage_client = s3client\n            s3resource = boto3.resource(\n                service_name,\n                endpoint_url=endpoint_url,\n                aws_access_key_id=credentials['AccessKeyId'],\n                aws_secret_access_key=credentials['SecretAccessKey'],\n                aws_session_token=credentials['SessionToken'],\n                region_name=region_name)\n            self._storage_resource = s3resource\n        else:\n            logging.info('Authentication Access Key')\n            s3client = boto3.client(\n                service_name,\n                endpoint_url=endpoint_url,\n                aws_access_key_id=aws_access_key_id,\n                aws_secret_access_key=aws_secret_access_key,\n                region_name=region_name)\n            self._storage_client = s3client\n            s3resource = boto3.resource(\n                service_name,\n                endpoint_url=endpoint_url,\n                aws_access_key_id=aws_access_key_id,\n                aws_secret_access_key=aws_secret_access_key,\n                region_name=region_name)\n            self._storage_resource = s3resource\n\n    def list_queues(self,\n                    queue_name_prefix=None):\n        \"\"\"List SQS queues.\n        :queue_name_prefix: list all queues starting with the prefix\n        \"\"\"\n        # Get client connection\n        try:\n            sqs_client = self._storage_client\n            response = sqs_client.list_queues(\n                QueueNamePrefix=queue_name_prefix)\n            print (response['QueueUrls'])\n        except:\n            logging.error(f\"No Queue with Prefix: {queue_name_prefix} could be found\")\n            exit(1)\n\n    def get_messages_from_queue(self, queue_name, launch_task, run_mode, rest):\n        \"\"\"Generates messages from an SQS queue.\n\n        Note: this continues to generate messages until the queue is empty.\n        Every message on the queue will be deleted.\n\n        Args:\n            queue_name: queue name to be checked\n            launch_task: task to be launched\n            run_mode: run once or in a loop\n            rest: rest object for oms communication\n        Returns:\n            -\n        Raises:\n            -\n        \"\"\"\n        # Get client connection\n        sqs_client = self._storage_client\n        # Get the queue_url from queue name\n        response = sqs_client.get_queue_url(QueueName=queue_name)\n        queue_url = response['QueueUrl']\n        logging.info(f\"queue_url: {queue_url}\")\n        global gl_last_time\n\n        attribute_names = ['${ops_var_attributenames}']\n        message_attribute_names = ['%s' % attr for attr in\n                                   \"${ops_var_messageattributenames}\".split(\",\")]\n        max_number_of_messages = int(\n            \"${ops_var_maxnumberofmessages}\" if \"${ops_var_maxnumberofmessages}\" else \"0\")\n        # visibility_timeout = 30\n        wait_time_seconds = int(\n            \"${ops_var_waittimeseconds}\" if \"${ops_var_waittimeseconds}\" else \"0\")\n        delete_messages = str(\n            \"${ops_var_delete_messages}\" if \"${ops_var_delete_messages}\" else \"Yes\")\n        logging.info(f\"Scanning for new messaged in queue: {queue_name}\")\n        while True:\n            if gl_time_difference:\n                time_now = time.time()\n                if time_now - gl_last_time > gl_time_difference:\n                    gl_last_time = time_now\n                    if not rest.check_task_status():\n                        logging.info(f\"Exiting\")\n                        exit(1)\n            resp = sqs_client.receive_message(\n                QueueUrl=queue_url,\n                AttributeNames=attribute_names,\n                MessageAttributeNames=message_attribute_names,\n                MaxNumberOfMessages=max_number_of_messages,\n                # VisibilityTimeout=visibility_timeout,\n                WaitTimeSeconds=wait_time_seconds\n            )\n            msg_count = 0\n            if \"Messages\" in resp:\n                for message in resp['Messages']:\n                    print(json.dumps(message))\n                    msg_count += 1\n                    message_body = message[\"Body\"]\n                    message_attributes = message[\"MessageAttributes\"]\n                    message_body_json_pack = str(\n                        message_body).replace('\"', '\\\\\"').replace(\"\\'\", '\\\\\"').replace(\n                        '\\n', '\\\\n')\n                    message_attributes_json_pack = str(\n                        message_attributes).replace('\"', '\\\\\"').replace(\"\\'\", '\\\\\"').replace(\n                        '\\n', '\\\\n')\n                    data_str = '{\"variables\": [{\"name\": \"body\", \"value\": \"%s\"}, ' \\\n                               '{\"name\": \"attributes\", \"value\": \"%s\"}], \"name\": \"%s\"}' \\\n                               % (message_body_json_pack,\n                                  message_attributes_json_pack,\n                                  gl_launch_task)\n                    logging.debug(data_str)\n                    rest.launch_task(data_str)\n                logging.info(\"Found %d Message%s\" % (msg_count, \"s\" if msg_count>1 else \"\"))\n\n            if not msg_count:\n                logging.debug(\"No Message was found\")\n                if gl_interval:\n                    logging.debug(f\"Sleeping {gl_interval} seconds\")\n                    time.sleep(float(gl_interval))\n                    continue\n                else:\n                    logging.info(f\"Exiting Not Found\")\n                    exit(10)\n\n            entries = [{'Id': str(index), 'ReceiptHandle': msg['ReceiptHandle']}\n                for index, msg in enumerate(resp['Messages'])]\n\n            if delete_messages == 'Yes':\n                logging.info(\"Deleting entries\")\n                resp = sqs_client.delete_message_batch(\n                    QueueUrl=queue_url, Entries=entries\n                )\n                # logging.info(\"delete response: \" + str(resp))\n                if len(resp['Successful']) != len(entries):\n                    raise RuntimeError(\n                        f\"Failed to delete messages: entries={entries!r} resp={resp!r}\"\n                    )\n                else:\n                    logging.info(\"Deleted %d entr%s\" % (len(entries), \"ies\" if msg_count>1 else \"y\"))\n                # logging.info(f\"Exiting Successful\")\n            else:\n                logging.info(f\"Message will remain in QUEUE, because Delete_Message option was not selected\")\n            if run_mode == \"run_once\":\n                logging.info(f\"Exiting Successful\")\n                exit(0)\n\n    def send_message(self):\n        script_data_dict = None\n        script_data = \"\"\n\n        # Get sqs connection\n        sqs_resource = self._storage_resource\n\n        # Get the queue\n        queue = sqs_resource.get_queue_by_name(QueueName='${ops_var_queuename}')\n\n        try:\n            script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n            script_data = script.read()\n            script_data_dict = json.loads(script_data)\n            logging.info(f\"attributes: {script_data}\")\n        except IOError:\n            logging.info(f\"No Message Attribute script provided\")\n\n        # Send message to SQS queue\n        response = queue.send_message(\n            DelaySeconds=int(\"${ops_var_delayseconds}\"),\n            MessageAttributes=script_data_dict,\n            MessageBody=('${ops_var_messagebody}')\n        )\n        logging.info(f\"Message Send with ID:{response['MessageId']}\")\n\n\nclass SbRestApi:\n    \"\"\"Stonebranch REST API Class for python\n\n    This class is written for web service operations to UAC\n\n    Attributes:\n        _base_url: base uac url\n        _auth_uac: authentication for uac\n        _library_version: keeps the class library version\n    \"\"\"\n    def __init__(self, base_url, authentication):\n        self._base_url = base_url\n        self._auth_uac = authentication\n        self._library_version = \"1.0\"\n        logging.info(\n            \"REST SB library version \" + self._library_version)\n\n    def launch_task(self, data_str):\n        url = '%s/resources/task/ops-task-launch' % self._base_url\n        logging.debug('URL: %s' % url)\n        local_headers = {'content-type': 'application/json'}\n\n        response = requests.post(url, headers=local_headers, data=data_str,\n                                 auth=self._auth_uac, stream=True)\n\n        if 200 != response.status_code:\n            logging.error('Response: %s' % response)\n            logging.error('Response: %s' % response.text)\n            exit(1)\n        else:\n            logging.debug('Response 200 received')\n\n    def check_task_status(self):\n        logging.info('Checking task status %s' % \"${ops_task_id}\")\n        task_states = \"queued,defined,time_wait,started,running,resource_wait,resource_requested,started\"\n        url = '%s/resources/taskinstance/list' % self._base_url\n        logging.debug('URL: %s' % url)\n        local_headers = {'Content-Type': 'application/json',\n                         'Accept': 'application/json'}\n        data_str = \"\"\"{\"sysId\": \"${ops_task_id}\"}\"\"\"\n        logging.debug(data_str)\n        response = requests.post(url, headers=local_headers, data=data_str,\n                                 auth=self._auth_uac, stream=True, verify=False)\n\n        if 200 != response.status_code:\n            logging.error('Response: %s' % response.text)\n            exit(1)\n        else:\n            logging.debug('Response 200 received %s' % response.text)\n\n        resp_data = None\n        try:\n            resp_data = response.json()\n            # ...\n        except ValueError:\n            # no JSON returned\n            pass\n        logging.debug(f\"received data: {resp_data}\")\n\n        if \"status\" in response.text:\n            task_status = resp_data[0][\"status\"]\n            logging.debug('STATUS: %s' % task_status)\n            if task_status.lower() in task_states:\n                return True\n            else:\n                return False\n        else:\n            logging.debug(\"Task is not existing\")\n            return False\n\n\n# -- Execute\nif __name__ == '__main__':\n    main()\n",
    "sysId": "9390c5154fa34ff59c281952be03e84c",
    "useCommonScript": false,
    "variablePrefix": "var",
    "waitForOutput": false
}